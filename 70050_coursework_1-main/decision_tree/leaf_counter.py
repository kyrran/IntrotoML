# -*- coding: utf-8 -*-def count_decision_nodes_under(node):    """    Counts the number of decision nodes under a given node.        Parameters:    - node (dict): The current node.        Returns:    - int: Number of decision nodes under the node.    """    # Base case: if node is None or it's a leaf, return 0    if node is None or node["leaf"]:        return 0    # Recursively get the count for left and right children    left_count = count_decision_nodes_under(node["left"])    right_count = count_decision_nodes_under(node["right"])    # Add one for the current node and the counts from left and right subtrees    return 1 + left_count + right_countdef count_widest_under(node):    if node is None:        return [0]    if node["leaf"]:        node["widest_under"] = 1        return increment([0], node["depth"])    # Get a list of number of nodes at each depth under left and right node    left_list = count_widest_under(node["left"])    right_list = count_widest_under(node["right"])    # Merge the two lists to calculate how wide the depth under this node is    width_list = add_list(left_list, right_list)    node["widest_under"] = max(left_list) + max(right_list)    return increment(width_list, node["depth"])def increment(list, index):    while len(list) <= index:        list.append(0)    list[index] = list[index] + 1    return listdef add_list(list_left, list_right):    max_len = max(len(list_left), len(list_right))    result = []    for i in range(max_len):        left = list_left[i] if i < len(list_left) else 0        right = list_right[i] if i < len(list_right) else 0        result.append(left + right)    return resultdef tree_depth(node):    """    Compute the depth of a tree rooted at the given node.    Parameters:        node: Root node of the tree    Returns:        Depth of the tree    """    if node is None:        return 0    if node["leaf"]:        return 1    left_depth = tree_depth(node["left"])    right_depth = tree_depth(node["right"])    return max(left_depth, right_depth) + 1